
&НаСервере
Процедура ОД_ПриСозданииНаСервереПеред(Отказ, СтандартнаяОбработка)
	
	ТекстЗапросаН = Список.ТекстЗапроса;
	
	ПодстрокаЗаменяемая = "ДокументЗаказПоставщику.СостояниеЗаказа КАК СостояниеЗаказа,";
	//ПодстрокаНовая = "ВЫБОР КОГДА ДокументЗаказПоставщику.СостояниеЗаказа.Наименование = ""Согласован"" Тогда 2 Иначе 1 Конец КАК СостояниеОД, ДокументЗаказПоставщику.ОД_ИзППМ КАК ИзППМ,"; 
	ПодстрокаНовая = "ВЫБОР КОГДА ДокументЗаказПоставщику.СостояниеЗаказа.Наименование = ""Согласован"" Тогда 2 Иначе 1 Конец КАК СостояниеОД, ВЫБОР КОГДА ДокументЗаказПоставщику.СЗПР_ПланПотребностейВМатериалах <> ЗНАЧЕНИЕ(Документ.УНСФ_ПланПотребностейВМатериалах.ПустаяСсылка) Тогда Истина Иначе Ложь Конец КАК ИзППМ,
	|ДокументЗаказПоставщику.ОД_СтатусДоработки КАК Доработка,"; 
	ТекстЗапросаН = СтрЗаменить(ТекстЗапросаН, ПодстрокаЗаменяемая, ПодстрокаНовая);
		
	Список.ТекстЗапроса = ТекстЗапросаН;
	
	ЭлементСостояниеОД = Элементы.Добавить("ОД_Состояние", Тип("ПолеФормы"), Элементы.Список);
	ЭлементСостояниеОД.Заголовок = "Согласован";
	ЭлементСостояниеОД.Вид = ВидПоляФормы.ПолеКартинки;
	ЭлементСостояниеОД.ПутьКДанным = "Список.СостояниеОД";
	ЭлементСостояниеОД.КартинкаЗначений = БиблиотекаКартинок.СостояниеРассылкиОтчетов;
	
	ЭлементСтатусДоработки = Элементы.Добавить("ОД_СтатусДоработки", Тип("ПолеФормы"), Элементы.Список); 
	ЭлементСтатусДоработки.Заголовок = "Статус Доработки";
	ЭлементСтатусДоработки.Вид = ВидПоляФормы.ПолеНадписи;
	ЭлементСтатусДоработки.ПутьКДанным = "Список.Доработка";
	
	ЭлементОД_ИзППМ = Элементы.Добавить("ОД_ИзППМ", Тип("ПолеФормы"), Элементы.Список);
	ЭлементОД_ИзППМ.Заголовок = "Из ППМ";
	ЭлементОД_ИзППМ.Вид = ВидПоляФормы.ПолеФлажка;
	ЭлементОД_ИзППМ.ПутьКДанным = "Список.ИзППМ";
	
	//Если РольДоступна("ОД_СогласованиеЗаказовПоставщикам") ИЛИ РольДоступна("АдминистраторСистемы") Тогда
	Если Пользователи.РолиДоступны("ОД_СогласованиеЗаказовПоставщикам", ПользователиИнформационнойБазы.ТекущийПользователь()) Тогда	
		Ком_Согласовать = ЭтаФорма.Команды.Добавить("Команда_Согласовать");
		Ком_Согласовать.Заголовок = "Согласовать";
		Ком_Согласовать.Действие = "ОД_Согласовать"; 
		Кно_Согласовать = ЭтаФорма.Элементы.Добавить("ОД_КнопкаСогласовать", Тип("КнопкаФормы"), Элементы.ФормаСоздатьПоШаблону.Родитель);
		Кно_Согласовать.Заголовок = "Согласовать";
		Кно_Согласовать.ИмяКоманды = "Команда_Согласовать";
		Кно_Согласовать.Отображение = ОтображениеКнопки.Картинка;
		Кно_Согласовать.Картинка = БиблиотекаКартинок.ОформлениеКругЗеленый;
		
		Ком_Отклонить = ЭтаФорма.Команды.Добавить("Команда_Отклонить");
		Ком_Отклонить.Заголовок = "Отклонить";
		Ком_Отклонить.Действие = "ОД_Отклонить"; 
		Кно_Отклонить = ЭтаФорма.Элементы.Добавить("ОД_КнопкаОтклонить", Тип("КнопкаФормы"), Элементы.ФормаСоздатьПоШаблону.Родитель);
		Кно_Отклонить.Заголовок = "Отклонить";
		Кно_Отклонить.ИмяКоманды = "Команда_Отклонить";
		Кно_Отклонить.Отображение = ОтображениеКнопки.Картинка;
		Кно_Отклонить.Картинка = БиблиотекаКартинок.ОформлениеКругПустой;
		
	КонецЕсли; 
	
	Если Пользователи.РолиДоступны("ОД_ЗавершениеСчетовНаОплатуПолученных", ПользователиИнформационнойБазы.ТекущийПользователь()) Тогда
		Ком_Согласовать = ЭтаФорма.Команды.Добавить("Команда_Завершить");
		Ком_Согласовать.Заголовок = "Завершить";
		Ком_Согласовать.Действие = "ОД_Завершить"; 
		Кно_Согласовать = ЭтаФорма.Элементы.Добавить("ОД_КнопкаЗавершить", Тип("КнопкаФормы"), Элементы.ФормаСоздатьПоШаблону.Родитель);
		Кно_Согласовать.Заголовок = "Завершить";
		Кно_Согласовать.ИмяКоманды = "Команда_Завершить";
		//Кно_Согласовать.Отображение = ОтображениеКнопки.Картинка;
		//Кно_Согласовать.Картинка = БиблиотекаКартинок.ОформлениеКругЗеленый;	
	КонецЕсли;
	
	// Таблица значений выбранного счета
	МассивТипаВыбора = Новый Массив;
	МассивТипаВыбора.Добавить(Тип("ТаблицаЗначений"));
	ОписаниеТипаВыбора = Новый ОписаниеТипов(МассивТипаВыбора);
	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ТаблицаВыводаДанных", ОписаниеТипаВыбора, "", "ТВД")); 
	
	КЧ = Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный);
	МассивКЧ = Новый Массив;
	МассивКЧ.Добавить(Тип("Число"));
	ОписаниеТиповЧисло = Новый ОписаниеТипов(МассивКЧ, , ,КЧ); 
	ОписаниеНом = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	ОписаниеЕдИ = Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения");
	ОписаниеНДС = Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС");
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Номенклатура", ОписаниеНом);
	ТЗ.Колонки.Добавить("Количество", ОписаниеТиповЧисло);
	ТЗ.Колонки.Добавить("ЕдИзм", ОписаниеЕдИ);
	ТЗ.Колонки.Добавить("Цена", ОписаниеТиповЧисло);
	ТЗ.Колонки.Добавить("НДС", ОписаниеНДС);
	ТЗ.Колонки.Добавить("Сумма");
	ТЗ.Колонки.Добавить("СуммаНДС");
	ТЗ.Колонки.Добавить("Всего");
	
	Для Каждого Колонка Из ТЗ.Колонки Цикл

	    МассивРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения,"ТаблицаВыводаДанных"));
	    
	КонецЦикла;
	ИзменитьРеквизиты(МассивРеквизитов);      
	ТаблицаПолейВыбора = Элементы.Добавить("ТВД", Тип("ТаблицаФормы"), );
	ТаблицаПолейВыбора.ПутьКДанным = "ТаблицаВыводаДанных";
	ТаблицаПолейВыбора.Отображение = ОтображениеТаблицы.Список;
	ТаблицаПолейВыбора.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Верх;
	ТаблицаПолейВыбора.ТолькоПросмотр = Истина; 
	ТаблицаПолейВыбора.Видимость = Ложь;
	
	ЭТЗ = Элементы.Добавить("ТВД_Номенклатура", Тип("ПолеФормы"), ТаблицаПолейВыбора); ЭТЗ.Ширина = 20;
	ЭТЗ.Вид = ВидПоляФормы.ПолеВвода; ЭТЗ.ПутьКДанным = "ТаблицаВыводаДанных.Номенклатура";
	
	ЭТЗ = Элементы.Добавить("ТВД_Количество", Тип("ПолеФормы"), ТаблицаПолейВыбора); ЭТЗ.Ширина = 10;
	ЭТЗ.Вид = ВидПоляФормы.ПолеВвода; ЭТЗ.ПутьКДанным = "ТаблицаВыводаДанных.Количество";
	
	ЭТЗ = Элементы.Добавить("ТВД_ЕдИзм", Тип("ПолеФормы"), ТаблицаПолейВыбора); ЭТЗ.Ширина = 8;
	ЭТЗ.Вид = ВидПоляФормы.ПолеВвода; ЭТЗ.ПутьКДанным = "ТаблицаВыводаДанных.ЕдИзм";
	ЭТЗ.Заголовок = "Ед. изм.";
	
	ЭТЗ = Элементы.Добавить("ТВД_Цена", Тип("ПолеФормы"), ТаблицаПолейВыбора); ЭТЗ.Ширина = 10;
	ЭТЗ.Вид = ВидПоляФормы.ПолеВвода; ЭТЗ.ПутьКДанным = "ТаблицаВыводаДанных.Цена";
	
	ЭТЗ = Элементы.Добавить("ТВД_НДС", Тип("ПолеФормы"), ТаблицаПолейВыбора); ЭТЗ.Ширина = 10;
	ЭТЗ.Вид = ВидПоляФормы.ПолеВвода; ЭТЗ.ПутьКДанным = "ТаблицаВыводаДанных.НДС"; 
	ЭТЗ.Заголовок = "% НДС";
	
	ЭТЗ = Элементы.Добавить("ТВД_Сумма", Тип("ПолеФормы"), ТаблицаПолейВыбора); ЭТЗ.Ширина = 8;
	ЭТЗ.Вид = ВидПоляФормы.ПолеВвода; ЭТЗ.ПутьКДанным = "ТаблицаВыводаДанных.Сумма";
	
	ЭТЗ = Элементы.Добавить("ТВД_СуммаНДС", Тип("ПолеФормы"), ТаблицаПолейВыбора); ЭТЗ.Ширина = 10;
	ЭТЗ.Вид = ВидПоляФормы.ПолеВвода; ЭТЗ.ПутьКДанным = "ТаблицаВыводаДанных.СуммаНДС";
	ЭТЗ.Заголовок = "Сумма НДС";
	
	ЭТЗ = Элементы.Добавить("ТВД_Всего", Тип("ПолеФормы"), ТаблицаПолейВыбора); ЭТЗ.Ширина = 10;
	ЭТЗ.Вид = ВидПоляФормы.ПолеВвода; ЭТЗ.ПутьКДанным = "ТаблицаВыводаДанных.Всего";
	
	ЭлементЕстьФайлы = Элементы.Добавить("ОД_ЕстьФайлы", Тип("ПолеФормы"), Элементы.Список);
	ЭлементЕстьФайлы.Вид = ВидПоляФормы.ПолеКартинки;
	ЭлементЕстьФайлы.ПутьКДанным = "Список.ЕстьФайлы";
	ЭлементЕстьФайлы.Заголовок = "Есть счета";
	ЭлементЕстьФайлы.КартинкаЗначений = БиблиотекаКартинок.КоллекцияСкрепка; 
	
	
	//Таблица по Счетам
	// Таблица значений выбранного счета
	МассивТипаВыбора = Новый Массив;
	МассивТипаВыбора.Добавить(Тип("ТаблицаЗначений"));
	ОписаниеТипаВыбора = Новый ОписаниеТипов(МассивТипаВыбора);
	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ТаблицаВыводаДанныхСчета", ОписаниеТипаВыбора, "", "ТВДС")); 
	
	КЧ = Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный);
	МассивКЧ = Новый Массив;
	МассивКЧ.Добавить(Тип("Число")); 
	ОписаниеТиповЧисло = Новый ОписаниеТипов(МассивКЧ, , ,КЧ); 
	ОписаниеСч = Новый ОписаниеТипов("ДокументСсылка.СчетНаОплатуПоставщика");
	ОписаниеКо = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Счет", ОписаниеСч);
	ТЗ.Колонки.Добавить("Поставщик", ОписаниеКо);
	ТЗ.Колонки.Добавить("ВхНомер", ОписаниеЕдИ);
	ТЗ.Колонки.Добавить("Сумма");
	ТЗ.Колонки.Добавить("Статус");
	ТЗ.Колонки.Добавить("Оплачен");
	
	Для Каждого Колонка Из ТЗ.Колонки Цикл

	    МассивРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения,"ТаблицаВыводаДанныхСчета"));
	    
	КонецЦикла;
	ИзменитьРеквизиты(МассивРеквизитов);      
	ТаблицаПолейВыбора = Элементы.Добавить("ТВДС", Тип("ТаблицаФормы"), );
	ТаблицаПолейВыбора.ПутьКДанным = "ТаблицаВыводаДанныхСчета";
	ТаблицаПолейВыбора.Отображение = ОтображениеТаблицы.Список;
	ТаблицаПолейВыбора.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
//	ТаблицаПолейВыбора.ТолькоПросмотр = Истина; 
	ТаблицаПолейВыбора.Видимость = Ложь;
	
	ЭТЗ = Элементы.Добавить("ТВДС_Счет", Тип("ПолеФормы"), ТаблицаПолейВыбора); ЭТЗ.Ширина = 20;
	ЭТЗ.Вид = ВидПоляФормы.ПолеВвода; ЭТЗ.ПутьКДанным = "ТаблицаВыводаДанныхСчета.Счет";
	
	ЭТЗ = Элементы.Добавить("ТВДС_Поставщик", Тип("ПолеФормы"), ТаблицаПолейВыбора); ЭТЗ.Ширина = 10;
	ЭТЗ.Вид = ВидПоляФормы.ПолеВвода; ЭТЗ.ПутьКДанным = "ТаблицаВыводаДанныхСчета.Поставщик";
	
	ЭТЗ = Элементы.Добавить("ТВДС_Сумма", Тип("ПолеФормы"), ТаблицаПолейВыбора); ЭТЗ.Ширина = 10;
	ЭТЗ.Вид = ВидПоляФормы.ПолеВвода; ЭТЗ.ПутьКДанным = "ТаблицаВыводаДанныхСчета.Сумма";
	
	ЭТЗ = Элементы.Добавить("ТВДС_Статус", Тип("ПолеФормы"), ТаблицаПолейВыбора); ЭТЗ.Ширина = 10;
	ЭТЗ.Вид = ВидПоляФормы.ПолеВвода; ЭТЗ.ПутьКДанным = "ТаблицаВыводаДанныхСчета.Статус"; 
	
	ЭТЗ = Элементы.Добавить("ТВДС_Оплачен", Тип("ПолеФормы"), ТаблицаПолейВыбора); ЭТЗ.Ширина = 8;
	ЭТЗ.Вид = ВидПоляФормы.ПолеВвода; ЭТЗ.ПутьКДанным = "ТаблицаВыводаДанныхСчета.Оплачен";
	
	Элементы.ТВДССтрокаПоиска.Видимость = Ложь;
	
	
	ДобавляемыеРеквизиты	= Новый Массив;
	ОД_Отбор_Номенклатура = Новый РеквизитФормы("ОД_Отбор_Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"),, "");
	ДобавляемыеРеквизиты.Добавить(ОД_Отбор_Номенклатура);
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	НЭ = Элементы.Добавить("ОД_Отбор_Номенклатура", Тип("ПолеФормы"), Элементы.ГруппаОтборы);
    НЭ.ПутьКДанным = "ОД_Отбор_Номенклатура";
    НЭ.Вид = ВидПоляФормы.ПолеВвода;
    НЭ.ПодсказкаВвода = "Позиция номенклатуры";
	НЭ.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет; 
	
	НЭ.УстановитьДействие("ПриИзменении", "ПриИзмененииОД_Отбор_Номенклатура");
	           
	Если Пользователи.РолиДоступны("ОД_Видимость_Прораб_РП", ПользователиИнформационнойБазы.ТекущийПользователь()) 
		И НЕ Пользователи.РолиДоступны("АдминистраторСистемы", ПользователиИнформационнойБазы.ТекущийПользователь()) Тогда
		
		ВыбратьТолькоСвои();
		
	ИначеЕсли Пользователи.РолиДоступны("ОД_ВидимостьРП",ПользователиИнформационнойБазы.ТекущийПользователь()) И 
		НЕ Пользователи.РолиДоступны("АдминистраторСистемы", ПользователиИнформационнойБазы.ТекущийПользователь()) Тогда 
		
		ВыбратьТолькоСвои();
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОД_Согласовать()

	МасСсылок = Новый Массив;
	
	Для Каждого Значение из Элементы.Список.ВыделенныеСтроки Цикл
		МасСсылок.Добавить(Значение);	
	КонецЦикла;                     
	
	ОД_СогласоватьНаСервере(МасСсылок);
	Элементы.Список.Обновить();	
	Сообщить("Статус ""Согласован"" установлен!"); 
	
КонецПроцедуры  
&НаСервере
Процедура ОД_СогласоватьНаСервере(МасСсылок)
	
	Для Каждого Значение из МасСсылок Цикл
		
		Попытка
			Об = Значение.ПолучитьОбъект();
			Об.СостояниеЗаказа = Справочники.СостоянияЗаказовПоставщикам.НайтиПоНаименованию("Согласован"); 
			Об.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());	
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОД_Отклонить()

	МасСсылок = Новый Массив;
	
	Для Каждого Значение из Элементы.Список.ВыделенныеСтроки Цикл
		МасСсылок.Добавить(Значение);	
	КонецЦикла;                     
	
	ОД_ОтклонитьНаСервере(МасСсылок);
	Элементы.Список.Обновить();
	Сообщить("Статус ""Отклонен"" установлен!");
	
КонецПроцедуры  
&НаСервере
Процедура ОД_ОтклонитьНаСервере(МасСсылок)
	
	Для Каждого Значение из МасСсылок Цикл
		
		Попытка
			Об = Значение.ПолучитьОбъект();
			Об.СостояниеЗаказа = Справочники.СостоянияЗаказовПоставщикам.НайтиПоНаименованию("Отклонён");
			Об.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());	
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОД_Завершить()
	МасСсылок = Новый Массив;
	
	Для Каждого Значение из Элементы.Список.ВыделенныеСтроки Цикл
		МасСсылок.Добавить(Значение);	
	КонецЦикла;                     
	
	ОД_ЗавершитьНаСервере(МасСсылок);
	Элементы.Список.Обновить();
	Сообщить("Статус ""Завершен"" установлен!");	
КонецПроцедуры
&НаСервере
Процедура ОД_ЗавершитьНаСервере(МасСсылок)
	Для Каждого Значение из МасСсылок Цикл
		
		Попытка
			Об = Значение.ПолучитьОбъект();
			Об.СостояниеЗаказа = Справочники.СостоянияЗаказовПоставщикам.НайтиПоНаименованию("Завершен");
			Об.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());	
		КонецПопытки;
		
	КонецЦикла;	
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьДопТаблицу(МасСтрук)

	Элементы.Найти("ТВД").Видимость = Истина;
	ЭтаФорма.ТаблицаВыводаДанных.Очистить();
		
	Для Каждого Значение из МасСтрук Цикл
		
		НС = ЭтаФорма.ТаблицаВыводаДанных.Добавить();
		
		НС.Количество = Значение.Количество;
		НС.Цена = Значение.Цена;
		НС.Сумма = Значение.Сумма;
		НС.СуммаНДС = Значение.СуммаНДС;
		НС.Всего = Значение.Всего;
		НС.Номенклатура = Значение.Номенклатура;
		НС.ЕдИзм = Значение.ЕдИзм;
		НС.НДС = Значение.НДС;
		
	КонецЦикла;
	
	Если МасСтрук.Количество() = 0 Тогда
		Элементы.Найти("ТВД").Видимость = Ложь;		
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Функция ПолучитьДанныеЗаполненияДопТаблицы(СсылкаНаДок)
	
	МасВозв = Новый Массив;
	
	Для Каждого Значение из СсылкаНаДок.Запасы Цикл
		
		СтрукВозв = Новый Структура;
		
		
		СтрукВозв.Вставить("Номенклатура", Значение.Номенклатура);
		СтрукВозв.Вставить("ЕдИзм", Значение.ЕдиницаИзмерения);
		СтрукВозв.Вставить("НДС", Значение.СтавкаНДС);
		СтрукВозв.Вставить("Количество", Значение.Количество);
		СтрукВозв.Вставить("Цена", Значение.Цена);
		СтрукВозв.Вставить("Сумма", Значение.Сумма);
		СтрукВозв.Вставить("СуммаНДС", Значение.СуммаНДС);
		СтрукВозв.Вставить("Всего", Значение.Всего);

        МасВозв.Добавить(СтрукВозв);
		
	КонецЦикла;
	
	Возврат МасВозв;
	
КонецФункции
&НаКлиенте
Процедура ОД_СписокПриАктивизацииСтрокиПосле1(Элемент)
	Если Элементы.Список.ТекущиеДанные <> Неопределено Тогда
		МасСтрук = ПолучитьДанныеЗаполненияДопТаблицы(Элементы.Список.ТекущиеДанные.Ссылка);
		ЗаполнитьДопТаблицу(МасСтрук);	
		
		МасСтрук = ПолучитьДанныеЗаполненияДопТаблицыСчета(Элементы.Список.ТекущиеДанные.Ссылка);
		ЗаполнитьДопТаблицуСчет(МасСтрук);
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ОД_СписокЗаказыПокупателейПриАктивизацииСтрокиПосле(Элемент)
	Элементы.Найти("ТВД").Видимость = Ложь;
	Элементы.Найти("ТВДС").Видимость = Ложь;
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеЗаполненияДопТаблицыСчета(ДокЗакПост)
	
	ИтогМас = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетНаОплатуПоставщика.Ссылка КАК Ссылка,
		|	СчетНаОплатуПоставщика.Контрагент КАК Контрагент,
		|	СчетНаОплатуПоставщика.НомерВходящегоДокумента КАК ВхНомер,
		|	СчетНаОплатуПоставщика.СуммаДокумента КАК СуммаДокумента,
		|	СчетНаОплатуПоставщика.ОД_Состояние КАК ОД_Состояние
		|ИЗ
		|	Документ.СчетНаОплатуПоставщика КАК СчетНаОплатуПоставщика
		|ГДЕ
		|	СчетНаОплатуПоставщика.ДокументОснование = &ДокументОснование 
		|	И СчетНаОплатуПоставщика.Проведен = ИСТИНА";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокЗакПост);	
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтрукВозв = Новый Структура;
		СтрукВозв.Вставить("Счет", ВыборкаДетальныеЗаписи.Ссылка);
		СтрукВозв.Вставить("Поставщик", ВыборкаДетальныеЗаписи.Контрагент);
		СтрукВозв.Вставить("ВхНомер", Строка(ВыборкаДетальныеЗаписи.ВхНомер)); 
		СтрукВозв.Вставить("Сумма", ВыборкаДетальныеЗаписи.СуммаДокумента);
		СтрукВозв.Вставить("Статус", Строка(ВыборкаДетальныеЗаписи.ОД_Состояние));
		СтрукВозв.Вставить("Оплачен", "");
		СтрукВозв.Вставить("ОсталосьОплатить", ВыборкаДетальныеЗаписи.СуммаДокумента);
		ИтогМас.Добавить(СтрукВозв);
	КонецЦикла; 
	
	Для Каждого Значение из ИтогМас Цикл
			
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	РасходСоСчетаРасшифровкаПлатежа.СуммаРасчетов КАК СуммаРасчетов
			|ИЗ
			|	Документ.РасходСоСчета.РасшифровкаПлатежа КАК РасходСоСчетаРасшифровкаПлатежа
			|ГДЕ
			|	РасходСоСчетаРасшифровкаПлатежа.СчетНаОплату = &Счет
			|	И РасходСоСчетаРасшифровкаПлатежа.Ссылка.Проведен = ИСТИНА";
		
		Запрос.УстановитьПараметр("Счет", Значение.Счет);		
		РезультатЗапроса = Запрос.Выполнить();		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Значение.ОсталосьОплатить = Значение.ОсталосьОплатить - ВыборкаДетальныеЗаписи.СуммаРасчетов;	
		КонецЦикла;
	
	КонецЦикла; 
	
	Возврат ИтогМас;
	
КонецФункции
&НаКлиенте
Процедура ЗаполнитьДопТаблицуСчет(МасСтрук)
	Элементы.Найти("ТВДС").Видимость = Истина;
	ЭтаФорма.ТаблицаВыводаДанныхСчета.Очистить();
		                            
	Для Каждого Значение из МасСтрук Цикл
		
		НС = ЭтаФорма.ТаблицаВыводаДанныхСчета.Добавить();
		
		НС.Счет = Значение.Счет;
		НС.Поставщик = Значение.Поставщик;
		НС.ВхНомер = Значение.ВхНомер;
		НС.Сумма = Значение.Сумма;
		НС.Статус = Значение.Статус;
		Если Значение.ОсталосьОплатить = 0 Тогда
			НС.Оплачен = "Оплачен";
		ИначеЕсли Значение.ОсталосьОплатить < 0 Тогда
			НС.Оплачен = "Переплата";	
		ИначеЕсли Значение.ОсталосьОплатить = Значение.Сумма Тогда
			НС.Оплачен = "Не оплачен";
		Иначе
			НС.Оплачен = "Частично оплачен";	
		КонецЕсли;

		
	КонецЦикла;   
		
	Если МасСтрук.Количество() = 0 Тогда
		Элементы.Найти("ТВДС").Видимость = Ложь;		
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииОД_Отбор_Номенклатура()
	Если ЭтаФорма.ОД_Отбор_Номенклатура <> ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка") Тогда
        ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ПравоеЗначение = ПолучитьМасСсылок();
		Элементы.Список.Обновить();
	Иначе
		Список.Отбор.Элементы.Очистить();
		Если НЕ ПроверитьрольНаВидимость() Тогда
			ВыбратьТолькоСвои();	
		КонецЕсли;    
		Элементы.Список.Обновить();
	КонецЕсли;
КонецПроцедуры 
&НаСервере
Функция ПолучитьМасСсылок()

	МасСписка = Новый Массив;
	Спис = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаказПоставщикуЗапасы.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаказПоставщику.Запасы КАК ЗаказПоставщикуЗапасы
		|ГДЕ
		|	ЗаказПоставщикуЗапасы.Номенклатура = &Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", ЭтаФорма.ОД_Отбор_Номенклатура);	
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МасСписка.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		Спис.Добавить(ВыборкаДетальныеЗаписи.Ссылка, "ВыборкаДетальныеЗаписи.Ссылка");
	КонецЦикла;
	
	Возврат Спис;
	
КонецФункции 

&НаСервере
Процедура ВыбратьТолькоСвои()

	ТекПол = ПользователиКлиентСервер.ТекущийПользователь();
	СписСсылок = ПолучитьСотрПоПольз(ТекПол);
	
	ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = СписСсылок;
	Элементы.Список.Обновить();
	
КонецПроцедуры
&НаСервере
Функция ПолучитьСотрПоПольз(ТекПол)
	
	МасСотр = Новый Массив;
	Спис = Новый СписокЗначений;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиПользователя.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.СотрудникиПользователя КАК СотрудникиПользователя
		|ГДЕ
		|	СотрудникиПользователя.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("Пользователь", ТекПол);	
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МасСотр.Добавить(ВыборкаДетальныеЗаписи.Сотрудник);	
	КонецЦикла; 
	Если Пользователи.РолиДоступны("ОД_Видимость_Прораб_РП", ПользователиИнформационнойБазы.ТекущийПользователь()) 
		И НЕ Пользователи.РолиДоступны("АдминистраторСистемы", ПользователиИнформационнойБазы.ТекущийПользователь()) Тогда	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗаказПоставщику.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
			|ГДЕ
			|	ЗаказПоставщику.ОД_ОтветственныйПрораб В(&Ответственный)";
		
		Запрос.УстановитьПараметр("Ответственный", МасСотр);	
		РезультатЗапроса = Запрос.Выполнить();	
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ИначеЕсли Пользователи.РолиДоступны("ОД_ВидимостьРП",ПользователиИнформационнойБазы.ТекущийПользователь()) И 
		НЕ Пользователи.РолиДоступны("АдминистраторСистемы", ПользователиИнформационнойБазы.ТекущийПользователь()) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗаказПоставщику.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
			|ГДЕ
			|	ЗаказПоставщику.Ответственный В(&Ответственный)";
		
		Запрос.УстановитьПараметр("Ответственный", МасСотр);	
		РезультатЗапроса = Запрос.Выполнить();	
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
	КонецЕсли;
		
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Спис.Добавить(ВыборкаДетальныеЗаписи.Ссылка, "Ссылка");
	КонецЦикла;
	
	Возврат Спис;
	
КонецФункции 
&НаСервере
Функция ПроверитьрольНаВидимость()
	Если Пользователи.РолиДоступны("ОД_Видимость_Прораб_РП", ПользователиИнформационнойБазы.ТекущийПользователь()) И 
			НЕ Пользователи.РолиДоступны("АдминистраторСистемы", ПользователиИнформационнойБазы.ТекущийПользователь()) Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции





